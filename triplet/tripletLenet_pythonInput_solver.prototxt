# =========================================================
# To train:
#   1. Add folder containing python input layer to PYTHONPATH
#   2. Run: caffe train --solver=/auto/research2/vut/thesis/CaffeLeNetMNIST/triplet/tripletLenet_pythonInput_solver.prototxt --gpu=1
#
# =========================================================

# The train/test net protocol buffer definition
net: "/auto/research2/vut/thesis/CaffeLeNetMNIST/triplet/tripletLenet_pythonInput_train_test.prototxt"

# test_iter specifies how many forward passes the test should carry out.
# In the case of MNIST, we have test batch size 100 and 100 test iterations,
# covering the full 10,000 testing images.
test_iter: 100

# Carry out testing every 500 training iterations.
test_interval: 500

# The base learning rate, momentum and the weight decay of the network.
base_lr: 0.01
momentum: 0.9
weight_decay: 0.0000

# The learning rate policy
lr_policy: "inv"
gamma: 0.0001
power: 0.75

# Display every 100 iterations
display: 20 #100

# The maximum number of iterations
max_iter: 1000 #50000

# snapshot intermediate results
snapshot: 100 #5000
snapshot_prefix: "/auto/research2/vut/thesis/CaffeLeNetMNIST/snapshots/tripletLenet_hizhangpLoss_pythonInput_randTriplet_trial2/tripletLenet_hizhangpLoss_pythonInput_randTriplet_trial2"

# solver mode: CPU or GPU
solver_mode: GPU

# Set to 1 to print debug info
debug_info: 0
